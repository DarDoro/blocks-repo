<blocks app="Snap! 4.1, http://snap.berkeley.edu" version="1"><block-definition s="listen for spoken words" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>/*&#xD; * Speech Detection in Snap!/NetsBlox&#xD; * &#xD; * Brought to you by the NetsBlox team. &#xD; *&#xD; * Like us on Facebook at https://www.facebook.com/netsblox/ or check out NetsBlox at https://netsblox.org :)&#xD; */&#xD;&#xD;// Detect if browser supports speech recognition&#xD;if (typeof webkitSpeechRecognition === &apos;undefined&apos; &amp;&amp; !SpeechRecognition) {&#xD;  throw new Error(&apos;Speech recognition not supported in this browser. Google Chrome is recommended&apos;);&#xD;}&#xD;&#xD;var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;&#xD;var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;&#xD;var SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;&#xD;var process = arguments[arguments.length-1];&#xD;&#xD;// Grammar is currently ignored: https://stackoverflow.com/questions/16883609/is-web-speech-api-grammar-exposed-to-developers&#xD;// var grammar = &apos;#JSGF V1.0; grammar choices; public &lt;choice&gt; = &apos; + choices.asArray().join(&apos; | &apos;) + &apos; ;&apos;&#xD;&#xD;if (!process.recognition) {&#xD;  process.recognition = new SpeechRecognition();&#xD;  process.recognizedWord = null;&#xD;  process.recognitionError = null;&#xD;  var speechRecognitionList = new SpeechGrammarList();&#xD;&#xD;//  Currently, the grammar list is unsupported&#xD;//  speechRecognitionList.addFromString(grammar, 1);&#xD;&#xD;  process.recognition.grammars = speechRecognitionList;&#xD;  //recognition.continuous = false;&#xD;  process.recognition.lang = &apos;en-US&apos;;&#xD;  process.recognition.interimResults = false;&#xD;  process.recognition.maxAlternatives = 1;&#xD;&#xD;  process.recognition.start();&#xD;&#xD;  process.recognition.onresult = function(event) {&#xD;    var last = event.results.length - 1;&#xD;    var choice = event.results[last][0].transcript;&#xD;    console.log(&apos;event&apos;, event);&#xD;    console.log(&apos;choice:&apos;, choice);&#xD;    process.recognizedWord = choice;&#xD;  };&#xD;  process.recognition.onerror = function(error) {&#xD;    if (error.message) {&#xD;      process.recognitionError = error;&#xD;    } else if (error.error === &apos;no-speech&apos;) {&#xD;      console.log(&apos;no speech detected&apos;);&#xD;      process.recognizedWord = &apos;&apos;;&#xD;    } else {&#xD;      process.recognitionError = new Error(error.message || error.error);&#xD;    }&#xD;  };&#xD;  process.recognition.onnomatch = function() {&#xD;    process.recognizedWord = undefined;&#xD;  };&#xD;} else if (process.recognitionError) {&#xD;  console.log(&apos;recognition error:&apos;, process.recognitionError);&#xD;  throw process.recognitionError;&#xD;} else if (process.recognizedWord !== null) {&#xD;  process.recognition.stop();&#xD;  process.recognition = null;&#xD;  return process.recognizedWord;&#xD;}&#xD;&#xD;process.pushContext(&apos;doYield&apos;);&#xD;process.pushContext();&#xD;&#xD;if (process.readyToTerminate) {  // Clean up if script terminated&#xD;  if (process.recognition) {&#xD;    process.recognition.stop();&#xD;    process.recognition = null;&#xD;  }&#xD;}&#xD;</l></block><list></list></block></block></script></block-definition></blocks>